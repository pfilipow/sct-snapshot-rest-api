{
    // JSHint Configuration, termMed
    // Settings
    "passfail"      : false,  // Stop on first error.
    "maxerr"        : 500,    // Maximum error before stopping.
    "white"         : false,  // Check against strict whitespace and indentation rules.
    "indent"        : 2,      // Specify indentation spacing

    // Predefined globals that JSHint will ignore.
    "browser"       : true,   // Standard browser globals e.g. `window`, `document`.

    "node"          : true,   // Enable globals available when code is running inside of the NodeJS runtime environment.
    "phantom"       : true,    // globals available inside of the PhantomJS runtime environment.

    "nonstandard"   : false,    // Define non-standard but widely adopted globals such as escape and unescape.
    "jquery"        : false,   // Enable globals exposed by jQuery JavaScript library.


    // Development.
    "debug"         : false,  // Allow debugger statements e.g. browser breakpoints.
    "devel"         : true,   // Allow developments statements e.g. `console.log();`.


    // ECMAScript 5.
    "es5"           : true,   // Allow ECMAScript 5 syntax.
    "strict"        : false,  // Require `use strict` pragma  in every file.
    "globalstrict"  : false,  // Allow global "use strict" (also enables 'strict').


    // The Good Parts. Enforcing Options
    "bitwise"       : true,   // Prohibit bitwise operators (&, |, ^, etc.).
    "curly"         : true,   // Require {} for every new block or scope.
    "eqeqeq"        : true,   // Require triple equals i.e. `===`.
    "immed"         : true,   // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    "latedef"       : true,   // Prohipit variable use before definition.
    "noarg"         : true,   // Prohibit use of `arguments.caller` and `arguments.callee`.
    "regexp"        : true,   // Prohibit `.` and `[^...]` in regular expressions..
    "undef"         : true,   // Require all non-global variables be declared before they are used.
    "trailing"      : true,   // Prohibit trailing whitespaces.


    // Relaxing Options - suppress certain types of warnings.
    "asi"           : false,    // Tolerate Automatic Semicolon Insertion (no semicolons).
    "boss"          : false,    // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "eqnull"        : false,    // Tolerate use of `== null`.
    "esnext"        : false,    // Allow ES.next specific features such as `const` and `let`.
    "evil"          : false,    // Tolerate use of `eval`.
    "expr"          : false,    // Tolerate `ExpressionStatement` as Programs.
    "forin"         : false,    // Tolerate `for in` loops without `hasOwnPrototype`.
    "funcscope"     : false,    // Tolerate declarations of variables inside of control structures while accessing them later from the outside.
    "iterator"      : false,    // Allow usage of __iterator__ property. (Firefox compatibility)
    "lastsemic"     : false,    // Tolerat missing semicolons when the it is omitted for the last statement in a one-line block.
    "laxbreak"      : false,    // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
    "laxcomma"      : false,    // Suppress warnings about comma-first coding style.
    "loopfunc"      : false,    // Allow functions to be defined within loops.
    "multistr"      : false,    // Tolerate multi-line strings.
    "scripturl"     : false,    // Tolerate script-targeted URLs.
    "smarttabs"     : false,    // Tolerate mixed tabs and spaces when the latter are used for alignmnent only.
    "shadow"        : false,    // Allows re-define variables later in code e.g. `var x=1; x=2;`.
    "sub"           : false,    // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "supernew"      : false,    // Tolerate `new function () { ... };` and `new Object;`
    "validthis"     : false,    // Tolerate strict violations when the code is running in strict mode and you use this in a non-constructor function.

    // Personal styling preferences.
    "newcap"        : true,   // Require capitalization of all constructor functions e.g. `new F()`.
    "noempty"       : true,   // Prohibit use of empty blocks.
    "nonew"         : true,   // Prohibit use of constructors for side-effects.
    "nomen"         : true,   // Prohibit use of initial or trailing underbars in names.
    "onevar"        : false,  // Allow only one `var` statement per function.
    "plusplus"      : false,  // Prohibit use of `++` & `--`.
}